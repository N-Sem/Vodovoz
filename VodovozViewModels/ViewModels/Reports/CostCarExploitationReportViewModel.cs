using QS.Dialog;
using QS.DomainModel.UoW;
using QS.Navigation;
using QS.Project.Journal.EntitySelector;
using QS.Utilities.Enums;
using QS.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading;
using Vodovoz.Domain.Logistic;
using Vodovoz.Domain.Logistic.Cars;

namespace Vodovoz.ViewModels.ViewModels.Reports
{
	public class CostCarExploitationReportViewModel : DialogTabViewModelBase
	{
		public IEntityAutocompleteSelectorFactory CarSelectorFactory { get; }
		public CancellationTokenSource ReportGenerationCancelationTokenSource { get; set; }
		public ReportOnTheCostsOfOperatingCars Report { get; set; }

		public DateTime StartDate { get; set; }
		public DateTime EndDate { get; set; }
		public Car Car { get; set; }
		public IList<CarTypeOfUse> SelectedCarTypeOfUse { get; set; }
		public IList<CarEventTypeNode> CarEventTypeNodes { get; }
		public IList<CarOwnType> SelectedCarOwnTypes { get; set; }

		public CostCarExploitationReportViewModel(
			IUnitOfWorkFactory unitOfWorkFactory,
			IInteractiveService interactiveService,
			INavigationManager navigation,
			IEntityAutocompleteSelectorFactory carSelectorFactory) : base(unitOfWorkFactory, interactiveService, navigation)
		{
			Title = "Затраты при эксплуатации ТС";

			CarEventTypeNodes = GetCarEventTypes();
			SelectedCarTypeOfUse = EnumHelper.GetValuesList<CarTypeOfUse>();
			SelectedCarOwnTypes = EnumHelper.GetValuesList<CarOwnType>();
			CarSelectorFactory = carSelectorFactory ?? throw new ArgumentNullException(nameof(carSelectorFactory));
		}

		public ReportOnTheCostsOfOperatingCars ActionGenerateReport(CancellationToken cancellationToken)
		{
			try
			{
				var report = Generate(cancellationToken);
				return report;
			}
			finally
			{
				UoW.Session.Clear();
			}
		}

		private ReportOnTheCostsOfOperatingCars Generate(CancellationToken cancellationToken)
		{
			var selectedCarEventTypes = GetSelectedCarEventTypes();
			var selectedSubjectView = selectedCarEventTypes.Count == CarEventTypeNodes.Count ? "Все" : string.Join(", ", selectedCarEventTypes.Select(e => e.Name));
			var result = new ReportOnTheCostsOfOperatingCars
			{
				StartDate = StartDate,
				EndDate = EndDate,
				SelectCar = Car?.Title ?? "Все авто",
				CarType = Car?.CarModel.Name ?? "Все авто",
				CarOwnType = string.Join(", ", SelectedCarOwnTypes.Select(cot => ConvertCarOwnTypeToString(cot))),
				CarTypeOfUse = string.Join(", ", SelectedCarTypeOfUse.Select(ct => ConvertCarTypeOfUseToString(ct))),
				SelectedSubject = selectedSubjectView
			};
			IList<CarEvent> events = GetEvents();
			cancellationToken.ThrowIfCancellationRequested();

			foreach(var ev in events)
			{
				result.Rows.Add(new ReportOnTheCostsOfOperatingCarsRow(ev));
			}
			result.Rows = result.Rows.OrderByDescending(r => r.SubjectEnd).ToList();

			return result;
		}

		private IList<CarEvent> GetEvents()
		{
			Car carAlias = null;
			CarEvent carEventAlias = null;
			CarModel carModelAlias = null;
			CarVersion carVersionAlias = null;

			return UoW.Session.QueryOver(() => carEventAlias)
										.JoinAlias(() => carEventAlias.Car, () => carAlias)
										.JoinAlias(() => carAlias.CarModel, () => carModelAlias)
										.JoinAlias(() => carAlias.CarVersions, () => carVersionAlias)
										.WhereRestrictionOn(() => carEventAlias.CarEventType).IsInG(GetSelectedCarEventTypes())
										.WhereRestrictionOn(() => carModelAlias.CarTypeOfUse).IsInG(SelectedCarTypeOfUse)
										.WhereRestrictionOn(() => carVersionAlias.CarOwnType).IsInG(SelectedCarOwnTypes)
										.Where(() => carVersionAlias.EndDate == null)
										.And(() => Car == null || Car == carEventAlias.Car)
										.And(() => carEventAlias.StartDate >= StartDate)
										.And(() => carEventAlias.EndDate <= EndDate)
										.And(() => !carEventAlias.DoNotShowInOperation)
										.List<CarEvent>();
		}

		private IList<CarEventTypeNode> GetCarEventTypes()
		{
			var carEventTypes = UoW.Session.QueryOver<CarEventType>().WhereNot(et => et.IsArchive).List();
			var result = new List<CarEventTypeNode>();
			foreach(var item in carEventTypes)
			{
				result.Add(new CarEventTypeNode(item));
			}
			return result;
		}

		private IList<CarEventType> GetSelectedCarEventTypes()
		{
			return CarEventTypeNodes.Where(cetn => cetn.Selected).Select(cetn => cetn.CarEventType).ToList();
		}

		private string ConvertCarOwnTypeToString(CarOwnType carOwnType)
		{
			switch(carOwnType)
			{
				case CarOwnType.Company:
					return "ТС компании";
				case CarOwnType.Driver:
					return "ТС водителя";
				case CarOwnType.Raskat:
					return "ТС в раскате";
				default:
					return "Неизвестно";
			};
		}

		private string ConvertCarTypeOfUseToString(CarTypeOfUse carTypeOfUse)
		{
			switch(carTypeOfUse)
			{
				case CarTypeOfUse.GAZelle:
					return "Грузовой (ГАЗель)";
				case CarTypeOfUse.Largus:
					return "Фургон (Ларгус)";
				case CarTypeOfUse.Truck:
					return "Фура";
				default:
					return "Неизвестно";
			}
		}
	}

	public class ReportOnTheCostsOfOperatingCarsRow
	{
		public string CarRegistrationNumber { get; private set; }
		public string CarOwnTypeString { get; private set; }
		public string CarTypeOfUseString { get; private set; }
		public DateTime SubjectStart { get; private set; }
		public DateTime SubjectEnd { get; private set; }
		public string SubjectType { get; private set; }
		public string Foundation { get; private set; }
		public string SubjectComment { get; private set; }
		public decimal Price { get; private set; }

		public ReportOnTheCostsOfOperatingCarsRow(CarEvent carEvent)
		{
			CarRegistrationNumber = carEvent.Car.RegistrationNumber;
			CarOwnTypeString = ConvertCarOwnTypeToString(carEvent.Car.CarVersions.Last().CarOwnType);
			CarTypeOfUseString = ConvertCarTypeOfUseToString(carEvent.Car.CarModel.CarTypeOfUse);
			SubjectStart = carEvent.StartDate;
			SubjectEnd = carEvent.EndDate;
			SubjectType = carEvent.CarEventType.Name;
			Foundation = carEvent.Foundation;
			SubjectComment = carEvent.Comment;
			Price = carEvent.RepairCost;
		}

		private string ConvertCarOwnTypeToString(CarOwnType carOwnType)
		{
			switch(carOwnType)
			{
				case CarOwnType.Company:
					return "ТС компании";
				case CarOwnType.Driver:
					return "ТС водителя";
				case CarOwnType.Raskat:
					return "ТС в раскате";
				default:
					return "Неизвестно";
			};
		}

		private string ConvertCarTypeOfUseToString(CarTypeOfUse carTypeOfUse)
		{
			switch(carTypeOfUse)
			{
				case CarTypeOfUse.GAZelle:
					return "Грузовой (ГАЗель)";
				case CarTypeOfUse.Largus:
					return "Фургон (Ларгус)";
				case CarTypeOfUse.Truck:
					return "Фура";
				default:
					return "Неизвестно";
			}
		}
	}

	public class ReportOnTheCostsOfOperatingCars
	{
		public ReportOnTheCostsOfOperatingCars()
		{
			Rows = new List<ReportOnTheCostsOfOperatingCarsRow>();
		}

		public DateTime StartDate { get; set; }
		public DateTime EndDate { get; set; }
		public string SelectCar { get; set; }
		public string CarType { get; set; }
		public string SelectedSubject { get; set; }
		public string CarOwnType { get; set; }
		public string CarTypeOfUse { get; set; }
		public string SumPrice
		{
			get
			{
				decimal sum = Rows?.Sum(x => x.Price) ?? 0;

				return Math.Round(sum, 2).ToString();
			}
		}
		public IList<ReportOnTheCostsOfOperatingCarsRow> Rows
		{
			get; set;
		}
	}

	public class CarEventTypeNode
	{
		public virtual bool Selected { get; set; }
		public CarEventType CarEventType { get; }
		public string Title => CarEventType.Name;

		public CarEventTypeNode(CarEventType carEventType)
		{
			CarEventType = carEventType;
		}
	}
}
