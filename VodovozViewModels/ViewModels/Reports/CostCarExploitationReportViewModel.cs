using QS.Dialog;
using QS.DomainModel.UoW;
using QS.Navigation;
using QS.Project.Journal.EntitySelector;
using QS.Utilities.Enums;
using QS.ViewModels;
using System;
using System.Collections.Generic;
using Gamma.Utilities;
using System.Linq;
using System.Threading;
using Vodovoz.Domain.Logistic;
using Vodovoz.Domain.Logistic.Cars;
using NHibernate.Criterion;
using Vodovoz.ViewModels.ViewModels.Logistic;
using QS.Project.Domain;
using System.Data.Bindings.Collections.Generic;
using QS.DomainModel.NotifyChange;
using Vodovoz.ViewModels.TempAdapters;
using QS.Project.Services.FileDialog;
using ClosedXML.Report;

namespace Vodovoz.ViewModels.ViewModels.Reports
{
	public class CostCarExploitationReportViewModel : DialogTabViewModelBase
	{
		private readonly IEntityChangeWatcher _entityChangeWatcher;
		private readonly IFileDialogService _fileDialogService;
		private const string _templatePath = @".\Reports\Cars\ReportOnTheCostsOfOperatingCars.xlsx";

		public IEntityAutocompleteSelectorFactory CarSelectorFactory { get; }
		public CancellationTokenSource ReportGenerationCancelationTokenSource { get; set; }
		public ReportOnTheCostsOfOperatingCars Report { get; set; }

		public DateTime StartDate { get; set; }
		public DateTime EndDate { get; set; }
		public Car Car { get; set; }
		public IList<CarTypeOfUse> SelectedCarTypeOfUse { get; set; }
		public IList<CarEventTypeNode> CarEventTypeNodes { get; }
		public IList<CarOwnType> SelectedCarOwnTypes { get; set; }


		public CostCarExploitationReportViewModel(
			IUnitOfWorkFactory unitOfWorkFactory,
			IInteractiveService interactiveService,
			INavigationManager navigation,
			ICarJournalFactory carSelectorFactory,
			IEntityChangeWatcher entityChangeWatcher, 
			IFileDialogService fileDialogService) : base(unitOfWorkFactory, interactiveService, navigation)
		{
			Title = "Затраты при эксплуатации ТС";

			DateTime now = DateTime.Now;
			StartDate = new DateTime(now.Year, now.Month - 1, 1);
			EndDate = StartDate.AddMonths(1).AddDays(-1);

			CarEventTypeNodes = GetCarEventTypes();
			SelectedCarTypeOfUse = EnumHelper.GetValuesList<CarTypeOfUse>();
			SelectedCarOwnTypes = EnumHelper.GetValuesList<CarOwnType>();

			_fileDialogService = fileDialogService ?? throw new ArgumentNullException(nameof(fileDialogService));
			CarSelectorFactory = (carSelectorFactory ?? throw new ArgumentNullException(nameof(carSelectorFactory))).CreateCarAutocompleteSelectorFactory();
			_entityChangeWatcher = entityChangeWatcher ?? throw new ArgumentNullException(nameof(entityChangeWatcher));
			UpdateOnChanges(typeof(CarEvent));
		}

		public void UpdateOnChanges(params Type[] entityTypes)
		{
			_entityChangeWatcher.BatchSubscribeOnEntity(BatchEntityChangeHandler, entityTypes);
		}


		void BatchEntityChangeHandler(EntityChangeEvent[] changeEvents)
		{
			GenerateReport();
		}

		public ReportOnTheCostsOfOperatingCars ActionGenerateReport(CancellationToken cancellationToken)
		{
			try
			{
				var report = Generate(cancellationToken);
				return report;
			}
			finally
			{
				UoW.Session.Clear();
			}
		}

		public void RowActivated(ReportOnTheCostsOfOperatingCarsRow carEvent)
		{
			NavigationManager.OpenViewModel<CarEventViewModel, IEntityUoWBuilder>(null, EntityUoWBuilder.ForOpen(carEvent.Id));
		}

		private ReportOnTheCostsOfOperatingCars Generate(CancellationToken cancellationToken)
		{
			var selectedCarEventTypes = GetSelectedCarEventTypes();
			var selectedSubjectView = selectedCarEventTypes.Count == CarEventTypeNodes.Count ? "Все" : string.Join(", ", selectedCarEventTypes.Select(e => e.Name));
			var seletedCarOwnType = Enum.GetNames(typeof(CarOwnType)).Length == SelectedCarTypeOfUse.Count ? "Все" : string.Join(", ", SelectedCarOwnTypes.Select(cot => cot.GetEnumTitle()));
			var seletedCarTypeOfUse = Enum.GetNames(typeof(CarTypeOfUse)).Length == SelectedCarTypeOfUse.Count ? "Все" : string.Join(", ", SelectedCarTypeOfUse.Select(ct => ct.GetEnumTitle()));

			var result = new ReportOnTheCostsOfOperatingCars
			{
				StartDate = StartDate,
				EndDate = EndDate,
				SelectCar = Car?.Title ?? "Все авто",
				CarOwnType = seletedCarOwnType,
				CarTypeOfUse = seletedCarTypeOfUse,
				SelectedSubject = selectedSubjectView
			};
			IList<CarEvent> events = GetEvents();
			cancellationToken.ThrowIfCancellationRequested();

			for(int i = 0; i < events.Count(); i++)
			{
				result.Rows.Add(new ReportOnTheCostsOfOperatingCarsRow(events[i], i + 1));
			}

			return result;
		}

		public void SaveReport()
		{
			var dialogSettings = new DialogSettings()
			{
				Title = "Сохранить",
				DefaultFileExtention = ".xlsx",
				FileName = $"{TabName} {DateTime.Now:yyyy-MM-dd-HH-mm}.xlsx"
			};
			var result = _fileDialogService.RunSaveFileDialog(dialogSettings);
			if(Report != null && result.Successful)
			{
				ExportReport(result.Path);
			}
		}


		private void ExportReport(string path)
		{
			var template = new XLTemplate(_templatePath);

			template.AddVariable(Report);
			template.Generate();

			template.SaveAs(path);
		}

		private IList<CarEvent> GetEvents()
		{
			Car carAlias = null;
			CarEvent carEventAlias = null;
			CarModel carModelAlias = null;
			CarVersion carVersionAlias = null;

			return UoW.Session.QueryOver(() => carEventAlias)
				.JoinAlias(() => carEventAlias.Car, () => carAlias)
				.JoinAlias(() => carAlias.CarModel, () => carModelAlias)
				.JoinAlias(() => carAlias.CarVersions, () => carVersionAlias)
				.WhereRestrictionOn(() => carEventAlias.CarEventType).IsInG(GetSelectedCarEventTypes())
				.WhereRestrictionOn(() => carModelAlias.CarTypeOfUse).IsInG(SelectedCarTypeOfUse)
				.WhereRestrictionOn(() => carVersionAlias.CarOwnType).IsInG(SelectedCarOwnTypes)
				.Where(() => carVersionAlias.EndDate == null)
				.And(() => Car == null || Car == carEventAlias.Car)
				.And(() => carEventAlias.StartDate >= StartDate)
				.And(() => carEventAlias.EndDate <= EndDate)
				.And(() => !carEventAlias.DoNotShowInOperation)
				.OrderByAlias(() => carEventAlias.EndDate).Desc()
				.List<CarEvent>();
		}

		private IList<CarEventTypeNode> GetCarEventTypes()
		{
			var defaultSelectedEvent = new string[] { "Ремонт", "Страховка" };
			var carEventTypes = UoW.Session.QueryOver<CarEventType>().WhereNot(et => et.IsArchive).List();
			var result = new List<CarEventTypeNode>();
			foreach(var item in carEventTypes)
			{
				var node = new CarEventTypeNode(item);
				if(defaultSelectedEvent.Contains(node.Title))
				{
					node.Selected = true;
				}
				result.Add(node);
			}
			return result;
		}

		public void GenerateReport()
		{
			ReportGenerationCancelationTokenSource = new CancellationTokenSource();
			Report = ActionGenerateReport(ReportGenerationCancelationTokenSource.Token);
			OnPropertyChanged(() => Report);
		}

		private IList<CarEventType> GetSelectedCarEventTypes()
		{
			return CarEventTypeNodes.Where(cetn => cetn.Selected).Select(cetn => cetn.CarEventType).ToList();
		}
	}

	public class ReportOnTheCostsOfOperatingCarsRow
	{
		public int Index { get; private set; }
		public int Id { get; private set; }
		public string CarRegistrationNumber { get; private set; }
		public string CarOwnTypeString { get; private set; }
		public string CarTypeOfUseString { get; private set; }
		public DateTime SubjectStart { get; private set; }
		public DateTime SubjectEnd { get; private set; }
		public string SubjectType { get; private set; }
		public string Foundation { get; private set; }
		public string SubjectComment { get; private set; }
		public decimal Price { get; private set; }
		public decimal Refund { get; private set; }
		public decimal CompanyExpenses { get; private set; }

		public ReportOnTheCostsOfOperatingCarsRow(CarEvent carEvent, int i)
		{
			Index = i;
			Id = carEvent.Id;
			CarRegistrationNumber = carEvent.Car.RegistrationNumber;
			CarOwnTypeString = carEvent.Car.CarVersions.Last().CarOwnType.GetEnumTitle();
			CarTypeOfUseString = carEvent.Car.CarModel.CarTypeOfUse.GetEnumTitle();
			SubjectStart = carEvent.StartDate;
			SubjectEnd = carEvent.EndDate;
			SubjectType = carEvent.CarEventType.Name;
			Foundation = carEvent.Foundation;
			SubjectComment = carEvent.Comment;
			Price = carEvent.RepairCost;
			Refund = carEvent.Fines?.Sum(p => p.TotalMoney) ?? 0;
			CompanyExpenses = Price - Refund;
		}
	}

	public class ReportOnTheCostsOfOperatingCars
	{
		public ReportOnTheCostsOfOperatingCars()
		{
			Rows = new GenericObservableList<ReportOnTheCostsOfOperatingCarsRow>();
		}

		public DateTime StartDate { get; set; }
		public DateTime EndDate { get; set; }
		public string SelectCar { get; set; }
		public string SelectedSubject { get; set; }
		public string CarOwnType { get; set; }
		public string CarTypeOfUse { get; set; }
		public string SumPrice
		{
			get
			{
				decimal sum = Rows?.Sum(x => x.Price) ?? 0;

				return Math.Round(sum, 2).ToString();
			}
		}
		public string SumRefund
		{
			get
			{
				decimal sum = Rows?.Sum(x => x.Refund) ?? 0;

				return Math.Round(sum, 2).ToString();
			}
		}

		public string SumCompanyExpenses
		{
			get
			{
				decimal sum = Rows?.Sum(x => x.CompanyExpenses) ?? 0;

				return Math.Round(sum, 2).ToString();
			}
		}
		public GenericObservableList<ReportOnTheCostsOfOperatingCarsRow> Rows { get; set; }
	}

	public class CarEventTypeNode
	{
		public virtual bool Selected { get; set; }
		public CarEventType CarEventType { get; }
		public string Title => CarEventType.Name;

		public CarEventTypeNode(CarEventType carEventType)
		{
			CarEventType = carEventType;
		}
	}
}
