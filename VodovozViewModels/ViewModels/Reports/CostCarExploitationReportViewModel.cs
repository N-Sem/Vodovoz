using QS.Dialog;
using QS.DomainModel.UoW;
using QS.Navigation;
using QS.Project.Journal.EntitySelector;
using QS.Utilities.Enums;
using QS.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading;
using Vodovoz.Domain.Logistic;
using Vodovoz.Domain.Logistic.Cars;

namespace Vodovoz.ViewModels.ViewModels.Reports
{
	public class CostCarExploitationReportViewModel : DialogTabViewModelBase
	{

		public IEntityAutocompleteSelectorFactory CarSelectorFactory { get; }
		public CancellationTokenSource ReportGenerationCancelationTokenSource { get; set; }
		public ReportOnTheCostsOfOperatingCars Report { get; set; }

		public DateTime StartDate { get; set; }
		public DateTime EndDate { get; set; }
		public Car Car { get; set; }
		public IList<Subject> RestrictedSubject { get; set; }
		public IList<CarTypeOfUse> RestrictedCarTypeOfUse { get; set; }
		public IList<CarOwnType> RestrictedCarOwnTypes { get; set; }



		public CostCarExploitationReportViewModel(
			IUnitOfWorkFactory unitOfWorkFactory,
			IInteractiveService interactiveService,
			INavigationManager navigation,
			IEntityAutocompleteSelectorFactory carSelectorFactory) : base(unitOfWorkFactory, interactiveService, navigation)
		{
			Title = "Затраты при эксплуатации ТС";

			RestrictedSubject = EnumHelper.GetValuesList<Subject>();
			RestrictedCarTypeOfUse = EnumHelper.GetValuesList<CarTypeOfUse>();
			RestrictedCarOwnTypes = EnumHelper.GetValuesList<CarOwnType>();
			CarSelectorFactory = carSelectorFactory ?? throw new ArgumentNullException(nameof(carSelectorFactory));
		}

		public ReportOnTheCostsOfOperatingCars ActionGenerateReport(
			CancellationToken cancellationToken)
		{
			try
			{
				var report = Generate(
					StartDate,
					EndDate,
					RestrictedCarOwnTypes,
					RestrictedCarTypeOfUse,
					RestrictedSubject,
					Car,
					cancellationToken);
				return report;
			}
			finally
			{
				UoW.Session.Clear();
			}
		}

		private ReportOnTheCostsOfOperatingCars Generate(
			DateTime startDate,
			DateTime endDate,
			IList<CarOwnType> carOwnType,
			IList<CarTypeOfUse> carTypeOfUse,
			IList<Subject> selectedSubject,
			Car car,
			CancellationToken cancellationToken)
		{
			var result = new ReportOnTheCostsOfOperatingCars
			{
				StartDate = startDate,
				EndDate = endDate,
				SelectCar = car?.Title ?? "Все авто",
				CarType = car?.CarModel.Name ?? "Все авто",
				CarOwnType = string.Join(", ", carOwnType),
				CarTypeOfUse = string.Join(", ", carTypeOfUse),
				SelectedSubject = string.Join(", ", selectedSubject)
			};

			// TODO: добавить в запрос выборку по	IList<CarOwnType> carOwnType,. 
			// TODO: добавить в запрос выборку по	IList<CarTypeOfUse> carTypeOfUse,. 
			// TODO: добавить в запрос выборку по	IList<Subject> selectedSubject,. 

			IList<CarEventType> carEventTypes = UoW.Session.QueryOver<CarEventType>().List();

			var events = UoW.Session.QueryOver<CarEvent>()
										// .WhereRestrictionOn(e => e.Car.CarModel.CarTypeOfUse).IsIn(carTypeOfUse.ToList())
										// .WhereRestrictionOn(e => e.Car.CarVersions.Last().CarOwnType).IsIn(carOwnType.ToList())
										.Where(e => car == null || car == e.Car)
										.And(e => e.StartDate >= startDate)
										.And(e => e.EndDate <= endDate)
										.And(e => !e.DoNotShowInOperation)
										.List<CarEvent>();

			cancellationToken.ThrowIfCancellationRequested();

			foreach(var ev in events)
			{
				result.Rows.Add(new ReportOnTheCostsOfOperatingCarsRow(ev));
			}

			return result;
		}
	}

	public class ReportOnTheCostsOfOperatingCarsRow
	{
		public string CarRegistrationNumber { get; private set; }
		public string CarGeographicGroups { get; private set; }
		public string CarType { get; private set; }
		public DateTime SubjectStart { get; private set; }
		public DateTime SubjectEnd { get; private set; }
		public string SubjectType { get; private set; }
		public string SubjectComment { get; private set; }
		public decimal Price { get; private set; }

		public ReportOnTheCostsOfOperatingCarsRow(CarEvent carEvent)
		{
			CarRegistrationNumber = carEvent.Car.RegistrationNumber;
			CarGeographicGroups = carEvent.Car.CarModel.CarTypeOfUse.ToString();
			CarType = carEvent.Car.CarModel.Name;
			SubjectStart = carEvent.StartDate;
			SubjectEnd = carEvent.EndDate;
			SubjectType = carEvent.CarEventType.Name;
			SubjectComment = carEvent.Comment;
			Price = carEvent.Price;
		}
	}

	public class ReportOnTheCostsOfOperatingCars
	{
		public ReportOnTheCostsOfOperatingCars()
		{
			Rows = new List<ReportOnTheCostsOfOperatingCarsRow>();
		}

		public DateTime StartDate { get; set; }
		public DateTime EndDate { get; set; }
		public string SelectCar { get; set; }
		public string CarType { get; set; }
		public string SelectedSubject { get; set; }
		public string CarOwnType { get; set; }
		public string CarTypeOfUse { get; set; }
		public string SumPrice
		{
			get
			{
				decimal sum = Rows?.Sum(x => x.Price) ?? 0;

				return Math.Round(sum, 2).ToString();
			}
		}
		public IList<ReportOnTheCostsOfOperatingCarsRow> Rows { get; set; }
	}

	public enum Subject : int
	{
		[Display(Name = "Ремонт")]
		Repair,
		[Display(Name = "Страховка")]
		Insurance,
		[Display(Name = "Иное")]
		More
	}
}
