using System;
using System.Threading;
using System.Threading.Tasks;
using ClosedXML.Report;
using Gamma.ColumnConfig;
using Gamma.Widgets.Additions;
using Gtk;
using QS.Views.GtkUI;
using Vodovoz.Domain.Logistic.Cars;
using Vodovoz.ViewModels.ViewModels.Reports;

namespace Vodovoz.Views.Reports
{
	public partial class CostCarExploitationReportView : TabViewBase<CostCarExploitationReportViewModel>
	{
		public CostCarExploitationReportView(CostCarExploitationReportViewModel viewModel) : base(viewModel)
		{
			Build();
			Configure();
		}

		private void Configure()
		{
			enumchecklistSubjectType.EnumType = typeof(Subject);
			enumchecklistSubjectType.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.RestrictedSubject, w => w.SelectedValuesList, new EnumsListConverter<Subject>())
				.InitializeFromSource();

			enumcheckCarTypeOfUse.EnumType = typeof(CarTypeOfUse);
			enumcheckCarTypeOfUse.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.RestrictedCarTypeOfUse, w => w.SelectedValuesList, new EnumsListConverter<CarTypeOfUse>())
				.InitializeFromSource();
			enumcheckCarTypeOfUse.SelectAll();

			enumcheckCarOwnType.EnumType = typeof(CarOwnType);
			enumcheckCarOwnType.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.RestrictedCarOwnTypes, w => w.SelectedValuesList, new EnumsListConverter<CarOwnType>())
				.InitializeFromSource();
			enumcheckCarOwnType.SelectAll();

			entryCar.SetEntityAutocompleteSelectorFactory(ViewModel.CarSelectorFactory);
			entryCar.CanEditReference = true;
			entryCar.Binding.AddBinding(ViewModel, vm => vm.Car, w => w.Subject).InitializeFromSource();

			datatreeviewDocuments.ColumnsConfig = FluentColumnsConfig<ReportOnTheCostsOfOperatingCarsRow>
				.Create()
				.AddColumn("Гос. Номер").SetDataProperty(ev => ev.CarRegistrationNumber)
				.AddColumn("Принадлежность авто").SetDataProperty(ev => ev.CarGeographicGroups)
				.AddColumn("Тип авто").SetDataProperty(ev => ev.CarType)
				.AddColumn("Начало события").SetDataProperty(ev => ev.SubjectStart.ToShortDateString())
				.AddColumn("Окончание события").SetDataProperty(ev => ev.SubjectEnd.ToShortDateString())
				.AddColumn("Вид события").SetDataProperty(ev => ev.SubjectType)
				.AddColumn("Комментарий").SetDataProperty(ev => ev.SubjectComment)
				.AddColumn("Стоимость").SetDataProperty(ev => ev.Price)
				.Finish();
		}

		protected async void OnYbuttonSaveClicked(object sender, EventArgs e)
		{
			var extension = ".xlsx";

			var filechooser = new FileChooserDialog("Сохранить отчет...",
				null,
				FileChooserAction.Save,
				"Отменить", ResponseType.Cancel,
				"Сохранить", ResponseType.Accept)
			{
				DoOverwriteConfirmation = true,
				CurrentName = $"{ViewModel.Title} {DateTime.Now:yyyy-MM-dd-HH-mm}{extension}"
			};

			var excelFilter = new FileFilter
			{
				Name = $"Документ Microsoft Excel ({extension})"
			};

			excelFilter.AddMimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			excelFilter.AddPattern($"*{extension}");
			filechooser.AddFilter(excelFilter);

			if(filechooser.Run() == (int)ResponseType.Accept)
			{
				var path = filechooser.Filename;

				if(!path.Contains(extension))
				{
					path += extension;
				}

				filechooser.Hide();

				await Task.Run(() =>
				{
					try
					{
						string templatePath = @".\Reports\Cars\ReportOnTheCostsOfOperatingCars.xlsx";

						var template = new XLTemplate(templatePath);

						datatreeviewDocuments.SetItemsSource(ViewModel.Report.Rows);

						template.AddVariable(ViewModel.Report);
						template.Generate();

						template.SaveAs(path);
					}
					finally
					{
						Application.Invoke((s, eventArgs) =>
						{
						});
					}
				});
			}
			filechooser.Destroy();
		}

		protected void OnYbuttonCreateReportClicked(object sender, EventArgs e)
		{
			ViewModel.ReportGenerationCancelationTokenSource = new CancellationTokenSource();
			try
			{
				ViewModel.Report = ViewModel.ActionGenerateReport(ViewModel.ReportGenerationCancelationTokenSource.Token);

				datatreeviewDocuments.SetItemsSource(ViewModel.Report.Rows);
			}
			catch(Exception ex)
			{
				Application.Invoke((s, eventArgs) => { throw ex; });
			}

		}
	}
}
