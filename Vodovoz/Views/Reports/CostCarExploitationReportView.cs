using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using ClosedXML.Report;
using Gamma.ColumnConfig;
using Gamma.Widgets.Additions;
using Gtk;
using QS.Views.GtkUI;
using Vodovoz.Domain.Logistic.Cars;
using Vodovoz.ViewModels.Logistic;
using Vodovoz.ViewModels.ViewModels.Reports;

namespace Vodovoz.Views.Reports
{
	public partial class CostCarExploitationReportView : TabViewBase<CostCarExploitationReportViewModel>
	{
		public CostCarExploitationReportView(CostCarExploitationReportViewModel viewModel) : base(viewModel)
		{
			Build();
			Configure();
		}

		private void Configure()
		{
			dateperiodpicker.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.StartDate, w => w.StartDate)
				.AddBinding(vm => vm.EndDate, w => w.EndDate)
				.InitializeFromSource();

			ytreeviewSubjectTypes.ColumnsConfig = FluentColumnsConfig<CarEventTypeNode>.Create()
				.AddColumn("").AddToggleRenderer(x => x.Selected)
				.AddColumn("Вид события").AddTextRenderer(x => x.Title)
				.Finish();
			ytreeviewSubjectTypes.ItemsDataSource = ViewModel.CarEventTypeNodes;

			enumcheckCarTypeOfUse.EnumType = typeof(CarTypeOfUse);
			enumcheckCarTypeOfUse.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.SelectedCarTypeOfUse, w => w.SelectedValuesList, new EnumsListConverter<CarTypeOfUse>())
				.InitializeFromSource();
			enumcheckCarTypeOfUse.SelectAll();

			enumcheckCarOwnType.EnumType = typeof(CarOwnType);
			enumcheckCarOwnType.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.SelectedCarOwnTypes, w => w.SelectedValuesList, new EnumsListConverter<CarOwnType>())
				.InitializeFromSource();
			enumcheckCarOwnType.SelectAll();

			entryCar.SetEntityAutocompleteSelectorFactory(ViewModel.CarSelectorFactory);
			entryCar.CanEditReference = true;
			entryCar.Binding.AddBinding(ViewModel, vm => vm.Car, w => w.Subject).InitializeFromSource();

			datatreeviewDocuments.ColumnsConfig = FluentColumnsConfig<ReportOnTheCostsOfOperatingCarsRow>.Create()
				.AddColumn("Гос. Номер").AddTextRenderer(ev => ev.CarRegistrationNumber)
				.AddColumn("Принадлежность авто").AddTextRenderer(ev => ev.CarOwnTypeString)
				.AddColumn("Тип авто").AddTextRenderer(ev => ev.CarTypeOfUseString)
				.AddColumn("Начало события").AddTextRenderer(ev => ev.SubjectStart.ToString("dd/MM/yyyy"))
				.AddColumn("Окончание события").AddTextRenderer(ev => ev.SubjectEnd.ToString("dd/MM/yyyy"))
				.AddColumn("Вид события").AddTextRenderer(ev => ev.SubjectType)
				.AddColumn("Основание").AddTextRenderer(ev => ev.Foundation)
				.AddColumn("Комментарий").AddTextRenderer(ev => ev.SubjectComment)
				.AddColumn("Общие затраты").AddTextRenderer(ev => ev.Price.ToString("0.##"))
				.AddColumn("Возмещение").AddTextRenderer(ev => ev.Refund.ToString("0.##"))
				.AddColumn("Затраты компании").AddTextRenderer(ev => ev.CompanyExpenses.ToString("0.##"))
				.Finish();
		}

		protected async void OnYbuttonSaveClicked(object sender, EventArgs e)
		{
			var extension = ".xlsx";
			var filechooser = new FileChooserDialog("Сохранить отчет...",
				null,
				FileChooserAction.Save,
				"Отменить", ResponseType.Cancel,
				"Сохранить", ResponseType.Accept)
			{
				DoOverwriteConfirmation = true,
				CurrentName = $"{ViewModel.Title} {DateTime.Now:yyyy-MM-dd-HH-mm}{extension}"
			};

			var excelFilter = new FileFilter
			{
				Name = $"Документ Microsoft Excel ({extension})"
			};

			excelFilter.AddMimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			excelFilter.AddPattern($"*{extension}");
			filechooser.AddFilter(excelFilter);

			if(filechooser.Run() == (int)ResponseType.Accept)
			{
				var path = filechooser.Filename;
				if(!path.Contains(extension))
				{
					path += extension;
				}

				filechooser.Hide();

				await Task.Run(() =>
				{
					try
					{
						datatreeviewDocuments.SetItemsSource(ViewModel.Report.Rows);

						string templatePath = @".\Reports\Cars\ReportOnTheCostsOfOperatingCars.xlsx";
						var template = new XLTemplate(templatePath);

						template.AddVariable(ViewModel.Report);
						template.Generate();

						template.SaveAs(path);
					}
					catch(Exception ex)
					{
						Application.Invoke((s, eventArgs) =>{ throw ex;	});
					}
				});
			}
			filechooser.Destroy();
		}

		protected void OnYbuttonCreateReportClicked(object sender, EventArgs e)
		{
			ViewModel.ReportGenerationCancelationTokenSource = new CancellationTokenSource();
			try
			{
				ViewModel.Report = ViewModel.ActionGenerateReport(ViewModel.ReportGenerationCancelationTokenSource.Token);
				datatreeviewDocuments.SetItemsSource(ViewModel.Report.Rows);
			}
			catch(Exception ex)
			{
				throw ex;
			}

		}

		protected void OnEventboxArrowButtonPressEvent(object o, ButtonPressEventArgs args)
		{
			parametersContainer.Visible = !parametersContainer.Visible;
			UpdateSliderArrow();
		}

		private void UpdateSliderArrow()
		{
			arrowSlider.ArrowType = parametersContainer.Visible ? ArrowType.Left : ArrowType.Right;
		}
	}
}
